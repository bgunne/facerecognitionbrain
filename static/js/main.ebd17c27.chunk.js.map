{"version":3,"sources":["Components/Navigation/Navigation.js","Components/Logo/Logo.js","Components/ImageLinkForm/ImageLinkForm.js","Components/Rank/Rank.js","Components/FaceRecognition/FaceRecognition.js","Components/Signin/Signin.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js","Components/Logo/brain.svg"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","paddingTop","src","brain","alt","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","Rank","name","entries","FaceRecognition","imageUrl","box","boundingBoxDivs","i","length","randomColor","Math","random","toString","push","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","boxShadow","id","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","React","Component","Register","onNameChange","initialState","input","route","joined","App","data","calculateFaceLocation","returnBox","clarifaiFace","image","document","getElementById","Number","outputs","regions","region_info","bounding_box","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","console","log","err","params","particles","number","density","enable","value_area","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.ebd17c27.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) =>\r\n{\r\n    \r\n        if(isSignedIn) \r\n        {   \r\n            return(\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p \r\n                onClick = {() => onRouteChange('signout')} \r\n                className='f3 link dim black underline pa3 pointer'>\r\n                Sign Out\r\n            </p>\r\n            </nav>\r\n            );\r\n        }\r\n        else\r\n        {\r\n            return(\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p \r\n                    onClick = {() => onRouteChange('signin')} \r\n                    className='f3 link dim black underline pa3 pointer'>\r\n                    Sign In\r\n                </p>\r\n                <p \r\n                    onClick = {() => onRouteChange('register')} \r\n                    className='f3 link dim black underline pa3 pointer'>\r\n                    Register\r\n                </p>\r\n            </nav>\r\n            );\r\n        }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport brain from './brain.svg';\r\nimport './Logo.css';\r\n\r\nconst Logo = () =>\r\n{\r\n    return (\r\n\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                    <img style={{paddingTop: '5px'}}src={brain} alt=\"logo\"></img>\r\n                </div>\r\n            </Tilt>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) =>\r\n{\r\n    return (\r\n\r\n        <div>\r\n            <p className='f3'>\r\n                {'This magic brain will detect faces in pictures. Give it a try!'}\r\n            </p>\r\n            <div className='center'> \r\n                <div className='form center pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center'type='text' onChange={onInputChange}/>\r\n                    <button className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple br2' onClick={onButtonSubmit}>Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = ({name, entries}) =>\r\n{\r\n    return (\r\n\r\n        <div>\r\n            <div className='white f3'>\r\n                {`${name}, your current entry count is...`}\r\n            </div>\r\n            <div className='white f1'>\r\n                {entries}\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({imageUrl, box}) =>\r\n{\r\n    let boundingBoxDivs = [];\r\n    \r\n    \r\n    for (let i = 0; i<box.length; i++) {\r\n        let randomColor = `0 0 0 3px #`+(Math.random()*0xFFFFFF<<0).toString(16)+` inset`;\r\n        boundingBoxDivs.push(<div className='bounding-box'\r\n        style={{\r\n            top: box[i].topRow,\r\n            right:box[i].rightCol,\r\n            bottom: box[i].bottomRow,\r\n            left: box[i].leftCol,\r\n            boxShadow: randomColor.toString()\r\n            }}></div>);\r\n    }\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img id = 'inputImage' src={imageUrl} alt='' width='500px' height='auto'/>\r\n                {boundingBoxDivs}\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\n\r\nclass Signin extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            signInEmail: '',\r\n            signInPassword: ''\r\n        };\r\n    }\r\n\r\n    onEmailChange = (event) =>\r\n    {\r\n        this.setState({signInEmail: event.target.value});\r\n    }\r\n    onPasswordChange = (event) =>\r\n    {\r\n        this.setState({signInPassword: event.target.value});\r\n    }\r\n\r\n    onSubmitSignIn  = () =>\r\n    {\r\n        fetch('https://rocky-lake-07524.herokuapp.com/signin',\r\n        {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify\r\n            (\r\n                {\r\n                    email: this.state.signInEmail,\r\n                    password: this.state.signInPassword\r\n                }\r\n            )\r\n        } )\r\n        .then(response => response.json())\r\n        .then( user =>\r\n            {\r\n                if(user.id)\r\n                {\r\n                    this.props.loadUser(user);\r\n                    this.props.onRouteChange('home');\r\n                }\r\n            });\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        const {onRouteChange} = this.props;\r\n        return (\r\n            <article className=\"br3 ba b--black -10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input \r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                type=\"email\" \r\n                                name=\"email-address\"  \r\n                                id=\"email-address\" \r\n                                onChange={this.onEmailChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input \r\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                type=\"password\" \r\n                                name=\"password\"  \r\n                                id=\"password\"\r\n                                onChange={this.onPasswordChange}\r\n                            />\r\n                        </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                        <input \r\n                            onClick={this.onSubmitSignIn } \r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                            type=\"submit\" \r\n                            value=\"Sign in\"/>\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">\r\n                        <p \r\n                            onClick={ () => onRouteChange('register')} \r\n                            className=\"f6 link dim black db pointer\">Register</p>\r\n                       \r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\n\r\nclass Register extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            email: '',\r\n            password: '',\r\n            name: ''\r\n        };\r\n    }\r\n\r\n    onEmailChange = (event) =>\r\n    {\r\n        this.setState({email: event.target.value});\r\n    }\r\n    onPasswordChange = (event) =>\r\n    {\r\n        this.setState({password: event.target.value});\r\n    }\r\n    onNameChange = (event) =>\r\n    {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    onSubmitSignIn  = () =>\r\n    {\r\n        fetch('https://rocky-lake-07524.herokuapp.com/register',\r\n        {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify\r\n            (\r\n                {\r\n                    email: this.state.email,\r\n                    password: this.state.password,\r\n                    name: this.state.name\r\n                }\r\n            )\r\n        } )\r\n        .then(response => response.json())\r\n        .then( user =>\r\n            {\r\n                if(user.id)\r\n                {\r\n                    this.props.loadUser(user);\r\n                    this.props.onRouteChange('home');\r\n                }\r\n            });\r\n        \r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                            <input \r\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                                type=\"text\" \r\n                                name=\"name\"  \r\n                                id=\"name\"\r\n                                onChange={this.onNameChange}\r\n                                />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input \r\n                            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"email\" \r\n                            name=\"email-address\"  \r\n                            id=\"email-address\"\r\n                            onChange={this.onEmailChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input \r\n                            className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"password\" \r\n                            name=\"password\"  \r\n                            id=\"password\"\r\n                            onChange={this.onPasswordChange}\r\n                            />\r\n                        </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                        <input \r\n                            onClick={this.onSubmitSignIn} \r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                            type=\"submit\" \r\n                            value=\"Register \"/>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n    \r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition'; \nimport Signin from './Components/Signin/Signin';\nimport Register from './Components/Register/Register';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\n\n\nconst initialState = \n{\n  input: 'a',\n  imageUrl: '',\n  box: [],\n  route: 'signin',\n  isSignedIn: false,\n  user:\n  {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state = initialState;\n    \n  }\n\n  loadUser = (data) =>\n  {\n    this.setState(\n      {\n        user:\n        {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      }\n    );\n  }  \n\n  calculateFaceLocation = (data) =>\n  {\n    const returnBox = [];\n    let clarifaiFace = '';\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    let box = {};\n    for (const element of data.outputs[0].data.regions) {\n        clarifaiFace = element.region_info.bounding_box;\n        box = {leftCol: clarifaiFace.left_col * width,\n          topRow: clarifaiFace.top_row * height,\n          rightCol: width - (clarifaiFace.right_col * width),\n          bottomRow: height - (clarifaiFace.bottom_row * height) }\n        returnBox.push(box);\n    }\n\n    return {\n      returnBox\n    }\n  }\n\n  displayFaceBox = (box) =>\n  {\n    this.setState({box: box.returnBox});\n    \n  }\n\n  onInputChange = (event) => \n  {\n    this.setState({input: event.target.value}); \n  }\n\n  onButtonSubmit = () =>\n  {\n    this.setState({imageUrl: this.state.input});\n    fetch('https://rocky-lake-07524.herokuapp.com/imageurl',\n    {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify\n      (\n          {\n              input: this.state.input\n          }\n      )\n    })\n    .then(response => response.json())\n    .then(response =>\n        {\n          if(response)\n          {\n            fetch('https://rocky-lake-07524.herokuapp.com/image',\n            {\n              method: 'put',\n              headers: {'Content-Type': 'application/json'},\n              body: JSON.stringify\n              (\n                  {\n                      id: this.state.user.id\n                  }\n              )\n            })\n            .then(response => response.json())\n            .then(count => \n              {\n                this.setState( Object.assign(this.state.user, {entries: count}));\n              })\n            .catch(console.log);\n\n          }\n          this.displayFaceBox(this.calculateFaceLocation(response))\n        })\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) =>\n  {\n    if(route === 'signout')\n    {\n      this.setState(initialState);\n      route='signin';\n    }\n    else if (route === 'home')\n    {\n      this.setState({isSignedIn: true});\n    }\n    this.setState({route: route});\n  }\n\n  render()\n  {  const { isSignedIn, imageUrl, route, box} = this.state;\n  \n    return(\n      <div className=\"App\">\n        <Particles className='particles'\n        params = {{\n          particles:\n          {\n            number:\n            {\n              value: 100,\n              density:\n              {\n                enable: true,\n                value_area: 800\n              }\n            }\n          }\n        }}/>\n        <Navigation isSignedIn={\n          isSignedIn} onRouteChange = {this.onRouteChange}/>\n        {\n          route === 'home'\n            ? <div>\n                <Logo />\n                <Rank name={this.state.user.name} entries={this.state.user.entries}/> \n                <ImageLinkForm \n                  onInputChange = {this.onInputChange} \n                  onButtonSubmit = {this.onButtonSubmit}  />\n                <FaceRecognition \n                  imageUrl={imageUrl}\n                  box = {box}  />\n             </div>\n            : \n            (\n              route === 'signin'\n                ?<Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n                :<Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n            ) \n        }\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.5090b11d.svg\";"],"sourceRoot":""}